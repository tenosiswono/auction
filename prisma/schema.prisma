// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Auction {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  startingPrice Int      @default(0)
  currentPrice  Int      @default(0)
  duration      Int      @default(0)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  creatorId     String // user ID of the creator
  creator       User     @relation("AuctionCreator", fields: [creatorId], references: [id])
  bids          Bid[]
  status        String   @default("active") // status of the auction: draft, active, completed, cancelled
  winnerId      String? // user ID of the winner
  winner        User?    @relation("AuctionWinner", fields: [winnerId], references: [id])
}

model Bid {
  id        String   @id @default(cuid())
  amount    Int
  bidderId  String // user ID of the bidder
  bidder    User     @relation(fields: [bidderId], references: [id])
  auctionId String // auction ID of the auction being bid on
  auction   Auction  @relation(fields: [auctionId], references: [id])
  createdAt DateTime @default(now())
}

model DepositHistory {
  id        String   @id @default(cuid())
  userId    String // user ID of the depositor
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  status    String   @default("debit") // status of the auction: debit, credit, debit-pending
  createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?          @db.Text
  password         String
  accounts         Account[]
  sessions         Session[]
  deposit          Int              @default(0) // deposit balance of user
  bids             Bid[] // bids made by the user
  depositHistories DepositHistory[] // reverse relation to Deposit.user
  wonAuctions      Auction[]        @relation("AuctionWinner") // reverse relation to Auction.winner
  createdAuctions  Auction[]        @relation("AuctionCreator") // auctions created by the user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
